package org.antonioxocoy.cecommerce.entity;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import lombok.Data;
import org.antonioxocoy.cecommerce.dto.UserDTO;
import org.antonioxocoy.cecommerce.util.SecureUtil;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import java.io.Serializable;
import java.security.SecureRandom;

import static org.antonioxocoy.cecommerce.util.SecureUtil.BCRYPT_STENGETH;

@Data
@DynamoDBTable(tableName = "Users")
public class User implements Serializable {
    private String id;
    private String createdAt;
    private String name;
    private String email;
    private String password;
    private Boolean isBlocked;
    private Boolean deleted;
    private String saltpassword;
    private String type;

    public User() {
    }

    public User(String name, String email, String password, String type) {
        this.name = name;
        this.email = email;
        this.type = type;
        this.setPassword(password);
    }

    public static User parse(UserDTO userDTO) {
        User newUser = new User();
        newUser.setName(userDTO.getName());
        newUser.setEmail(userDTO.getEmail());
        newUser.setPassword(userDTO.getPassword());
        newUser.setType(userDTO.getType());
        return newUser;
    }

    public static User parseAndJoin(UserDTO userDTO, User pastUser) {
        pastUser.setName(userDTO.getName());
        pastUser.setEmail(userDTO.getEmail());
        pastUser.setPassword(userDTO.getPassword());
        pastUser.setType(userDTO.getType());
        return pastUser;
    }

    @DynamoDBAttribute(attributeName = "name")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @DynamoDBAttribute(attributeName = "email")
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @DynamoDBAttribute(attributeName = "password")
    public String getPassword() {
        return password;
    }

    /**
     * Encrypt the Password plain text and save Salt Password
     *
     * @param password
     */
    public void setPassword(String password) {
        SecureRandom randomSalt = new SecureRandom();
        this.setSaltPassword(SecureUtil.generateSafeToken(randomSalt));
        BCryptPasswordEncoder bCryptPasswordEncoder =
                new BCryptPasswordEncoder(BCRYPT_STENGETH, randomSalt);
        this.password = bCryptPasswordEncoder.encode(password);
    }

    @DynamoDBAttribute(attributeName = "salt_password")
    public String getSaltPassword() {
        return this.saltpassword;
    }

    public void setSaltPassword(String saltpassword) {
        this.saltpassword = saltpassword;
    }

    @DynamoDBAttribute(attributeName = "type")
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    /**
     * Primary Key -> Partial Key
     * Generate de ID of the Collection
     *
     * @return id
     */
    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    /**
     * Primary Key -> Sort Key
     * Generate Date to save when the document was created
     * Use as sort Key to sort by dates
     *
     * @return createdAt
     */
    @DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.ALWAYS)
    @DynamoDBAttribute(attributeName = "created_at")
    public String getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    @DynamoDBAttribute(attributeName = "isBlocked")
    public Boolean getIsBlocked() {
        return isBlocked;
    }

    public void setIsBlocked(Boolean isBlocked) {
        this.isBlocked = isBlocked;
    }

    @DynamoDBAttribute(attributeName = "deleted")
    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }
}
